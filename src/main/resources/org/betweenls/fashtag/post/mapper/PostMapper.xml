<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.betweenls.fashtag.post.mapper.PostMapper">
	<resultMap id="ResultMap" type="org.betweenls.fashtag.post.domain.PostVO">
		<id property="postId" column="postId"></id>
		<result property="postContent" column="postContent"></result>
		<result property="picture" column="picture"></result>
		<result property="createdAt" column="createdAt"></result>
		<result property="updatedAt" column="updatedAt"></result>
		<result property="readCount" column="readCount"></result>
		<result property="userId" column="userId"></result>
		<result property="likeCount" column="likeCount"></result>
		<result property="likeStatus" column="likeStatus"></result>
		<result property="nickname" column="nickname"></result>
		<collection property="hashtags" column="postId" javaType="List" ofType="String" select="findHashtagByPostId"></collection>
	</resultMap>

	<select id="getAllPost" resultMap="ResultMap">
		<![CDATA[
		select p.postid,p.postContent, p.picture, p.createdat,p.updatedat,p.readcount,p.userid, u.nickname, u.profile, nvl((select count(userid)
																														  from likes
																														  where postid = p.postid
																														  group by postid), 0) likeCount,
																													   (select decode(count(likeId), 1, 'Y', 'N')
																														from likes
																														where userId=#{userId} AND postId=p.postId) likeStatus
		from posts p inner join users u
								on p.userid = u.userid
		order by ${order} desc
		]]>
	</select>
	<select id="findHashtagByPostId" resultType="String" parameterType="Long">
		select substr(hashtag, 2)
		from post_hashtag ph inner join hashtag h on ph.hashtagId = h.hashtagId
		where postid = ${postId}
	</select>

	<select id="getHashtagPost"
			resultMap="ResultMap"><![CDATA[
		select p.postid,postContent, picture, createdat,updatedat,readcount,userid, (select count(userid)
																					 from likes
																					 where postid = p.postid
																					 group by postid) likeCount,
			   (select nickname
				from users
				where userId = p.userId) nickname,
		    (select profile
			from users
			where userId = p.userId) profile
		from posts p left outer join post_hashtag ph
									 on p.postid = ph.postid left outer join hashtag h
																			 on ph.hashtagId = h.hashtagid
		where hashtag = #{hashtag}
		]]>
	</select>

	<insert id="insertPost">
		<selectKey keyProperty="postId" resultType="java.lang.Long" order="BEFORE">
			SELECT seq_posts.nextval as postId FROM dual
		</selectKey>
		insert into posts (postId, postContent, picture, userId)
		values (#{postId}, #{postContent}, #{picture}, #{userId})
	</insert>

	<select id="getHashtagIdByHashtagName" resultType="java.lang.Long">
		select hashtagId from hashtag h where h.hashtag = #{hashtagName}
	</select>

	<insert id="insertHashtag">
		insert into hashtag (hashtagId, hashtag)
		values (seq_hashtag.nextval, #{hashtagName})
	</insert>

	<insert id="insertPost_hashtag" parameterType="map">
		insert into Post_hashtag (postHashtagId, postId, hashtagId)
		values (seq_post_hashtag.nextval, #{postId}, #{hashtagId})
	</insert>

	<delete id="deletePostByPostId">
		delete from posts where postId = #{postId}
	</delete>
	<delete id="deletePost_hashtagByPostId">
		delete from Post_hashtag where postId = #{postId}
	</delete>
	<delete id="deleteLikeByPostId">
		delete from Likes where postId = #{postId}
	</delete>
	<delete id="deleteCommentByPostId">
		delete from Comments where postId = #{postId}
	</delete>

	<update id="updatePost">
		update posts
		set
			postContent=#{postContent},
		<if test="picture != null">
			picture = #{picture},
		</if>
			updatedAt=sysdate
		where postId = #{postId}
	</update>

	<select id="getPostByUserId">
		select postId
		from posts
		where userId=#{userId}
	</select>

	<!--	<select id="getListWithPaging"-->
<!--		resultType="org.betweenls.fashtag.domain.PostVO">-->
<!--	 <![CDATA[	-->
<!--	 	select -->
<!--	 		bno, title, content, writer, updatedate-->
<!--	 	from-->
<!--	 		(-->
<!--	 			select /*+INDEX_DESC(tbl_board pk_board) */-->
<!--	 				rownum rn, bno, title, content, writer, updatedate-->
<!--	 			from -->
<!--	 				tbl_board-->
<!--	 			where rownum <= #{pageNum} * #{amout})-->
<!--	 	where rn > (#{pageNum} -1) * #{amout}-->
<!--	 ]]>-->
<!--	</select>-->



<!--	<insert id="insertSelectKey">-->
<!--		<selectKey keyProperty="bno" order="BEFORE"-->
<!--			resultType="long">-->
<!--			select seq_board.nextval from dual-->
<!--		</selectKey>-->
<!--		insert into tbl_board (bno, title, content, writer)-->
<!--		values-->
<!--		(seq_board.nextval, #{title}, #{content}, #{writer})-->
<!--	</insert>-->

<!--	<select id="read"-->
<!--		resultType="org.betweenls.fashtag.domain.PostVO">-->
<!--		SELECT * FROM tbl_board WHERE bno = #{bno}-->
<!--	</select>-->




</mapper>