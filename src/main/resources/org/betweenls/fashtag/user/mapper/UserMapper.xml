<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.betweenls.fashtag.user.mapper.UserMapper">

    <insert id="join" parameterType="UserVO">
        <!-- insert 문 -->
        insert into users (userId, id, password, nickname, username)
        values (seq_users.nextval, #{id}, #{password}, #{nickname}, #{username})

        <!-- Select Key를 이용한 새로운 primary key 값 반환 -->
        <selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Long">
            SELECT seq_users.currval FROM dual
        </selectKey>
    </insert>

    <insert id="setAuth" parameterType="Long">
        insert into auth (userId, auth)
        values (#{userId}, 'ROLE_USER')
    </insert>

    <resultMap id="userMap" type="org.betweenls.fashtag.user.domain.UserVO">
        <id property="userId" column="userId"/>
        <result property="id" column="id"/>
        <result property="password" column="password"/>
        <result property="profile" column="profile"/>
        <result property="nickname" column="nickname"/>
        <result property="username" column="username"/>
        <result property="createdAt" column="createdAt"/>
        <collection property="authList" resultMap="authMap"/>
    </resultMap>

    <resultMap id="authMap" type="org.betweenls.fashtag.user.domain.AuthVO">
        <result property="userId" column="userId"/>
        <result property="auth" column="auth"/>
    </resultMap>

    <select id="getUserById" parameterType="String" resultMap="userMap">
        SELECT
            u.userId, u.id, u.password, u.profile, u.nickname, u.username, u.createdAt, a.auth
        FROM users u
                 LEFT OUTER JOIN auth a ON u.userId = a.userId
        WHERE u.id = #{id}
    </select>

    <select id="getUserDetail" parameterType="long" resultMap="userMap">
        SELECT
            u.userId, u.id, u.password, u.profile, u.nickname, u.username, u.createdAt, a.auth
        FROM users u
                 LEFT OUTER JOIN auth a ON u.userId = a.userId
        WHERE u.userId = #{userId}
    </select>

    <select id="idcheck" parameterType="String" resultType="Integer">
        SELECT COUNT(*) FROM users
        WHERE
            id = #{id}
    </select>

    <select id="nicknameCheck" parameterType="String" resultType="Integer">
        SELECT COUNT(*) FROM users
        WHERE
            nickname = #{nickname}
    </select>

    <select id="getPost" parameterType="Long" resultType="PostPictureVO">
        select postId, picture
        from posts
        where userId = #{userId}
    </select>

    <select id="getHashTage" parameterType="Long" resultType="String">
        SELECT h.HASHTAG
        FROM HASHTAG h
                 LEFT JOIN ADMIN.POST_HASHTAG PH ON h.HASHTAGID = PH.HASHTAGID
                 LEFT JOIN ADMIN.POSTS P ON PH.POSTID = P.POSTID
        WHERE p.USERID = #{userId}
        GROUP BY h.HASHTAG
        HAVING COUNT(ph.HASHTAGID) > 0
        ORDER BY COUNT(ph.HASHTAGID) DESC
            FETCH FIRST 5 ROWS ONLY
    </select>

    <update id="updateProfile">
        UPDATE users
        SET  profile = #{photoKey}
        where userId = #{userId}
    </update>

    <delete id="deleteAuth">
        DELETE FROM auth WHERE userId = #{userId}
    </delete>

    <delete id="deleteUser">
        DELETE FROM users WHERE userId = #{userId}
    </delete>

    <update id="editUser">
        update users
        set
            id = ${id},
            nickname = ${userVO.nickname},
            username = ${userVO.username}
        where userId = ${userVO.userId}
    </update>

</mapper>